<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zOnemercy and you</title>
    <description>This is a description of zOnemercy</description>
    <link>zonemercy.github.io/</link>
    <atom:link href="zonemercy.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 18 Apr 2016 19:27:46 +0200</pubDate>
    <lastBuildDate>Mon, 18 Apr 2016 19:27:46 +0200</lastBuildDate>
    <generator>Jekyll v3.1.0</generator>
    
      <item>
        <title>Oscar Prediction : Leonardo DiCaprio Will Finally Win an Oscar</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;小李子的故事&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
import os, time
import urllib2, urllib, re, bs4
import numpy as np
import pandas as pd
from pandas import DataFrame, Series
import json
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;```python
# list = [‘BAFTA’, ‘Globes’, ‘SAG’, ‘Spirits’, ‘CC’, ‘Oscar’]
# BAFTA=DataFrame()
# Globes=DataFrame()
# SAG=DataFrame()
# Spirits=DataFrame()
# CC=DataFrame()
# Oscar=DataFrame()&lt;/p&gt;

&lt;h1 id=&quot;dic--baftabafta-globesglobes-sagsag-spiritsspirits-cccc-oscaroscar&quot;&gt;dic = {“BAFTA”:BAFTA, “Globes”:Globes, “SAG”:SAG, “Spirits”:Spirits, “CC”:CC, “Oscar”:Oscar}&lt;/h1&gt;
&lt;p&gt;dic = {“BAFTA”:DataFrame(), “Globes”:DataFrame(), “SAG”:DataFrame(), “Spirits”:DataFrame(), “CC”:DataFrame(), “Oscar”:DataFrame()}&lt;/p&gt;

&lt;p&gt;for key in dic.keys():
    dic[key] = pd.read_json(json.loads(open(key + ‘.json’).read()), orient=’split’)
    print key &lt;br /&gt;
    print dic[key].head()
```&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BAFTA
              name  year  BAFTA0  BAFTA1  BAFTA2
0       Hugh Grant  1995       0       0       1
1    Terence Stamp  1995       0       1       0
2        Tom Hanks  1995       0       1       0
3    John Travolta  1995       0       1       0
4  Nigel Hawthorne  1996       0       0       1
Spirits
                name  year  Spirits0  Spirits1  Spirits2
0  Samuel L. Jackson  1995         0         0         1
1        Sihung Lung  1995         0         1         0
2    William H. Macy  1995         0         1         0
3     Campbell Scott  1995         0         1         0
4           Jon Seda  1995         0         1         0
CC
             name  year  CC0  CC1  CC2
0     Kevin Bacon  1996    0    0    1
1    Nicolas Cage  1996    0    1    0
2   Geoffrey Rush  1997    0    0    1
3      Tom Cruise  1997    0    1    0
4  Jack Nicholson  1998    0    0    1
Oscar
              name  year  Oscar0  Oscar1  Oscar2
0        Tom Hanks  1995       0       0       1
1   Morgan Freeman  1995       0       1       0
2  Nigel Hawthorne  1995       0       1       0
3      Paul Newman  1995       0       1       0
4    John Travolta  1995       0       1       0
SAG
             name  year  SAG0  SAG1  SAG2
0       Tom Hanks  1995     0     0     1
1  Morgan Freeman  1995     0     1     0
2     Paul Newman  1995     0     1     0
3     Tim Robbins  1995     0     1     0
4   John Travolta  1995     0     1     0
Globes
             name  year  Globes0  Globes1  Globes2
0       Tom Hanks  1995        0        0        1
1  Morgan Freeman  1995        0        1        0
2     Paul Newman  1995        0        1        0
3       Brad Pitt  1995        0        1        0
4   John Travolta  1995        0        1        0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
award_list = dic[&#39;BAFTA&#39;]
for x in [&#39;Globes&#39;, &#39;SAG&#39;, &#39;Spirits&#39;, &#39;CC&#39;, &#39;Oscar&#39;]:
    award_list = pd.merge(award_list,dic[x], how=&#39;outer&#39;, on=[&#39;name&#39;,&#39;year&#39;])
award_list.head()
&lt;/code&gt;&lt;/p&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;BAFTA0&lt;/th&gt;
      &lt;th&gt;BAFTA1&lt;/th&gt;
      &lt;th&gt;BAFTA2&lt;/th&gt;
      &lt;th&gt;Globes0&lt;/th&gt;
      &lt;th&gt;Globes1&lt;/th&gt;
      &lt;th&gt;Globes2&lt;/th&gt;
      &lt;th&gt;SAG0&lt;/th&gt;
      &lt;th&gt;SAG1&lt;/th&gt;
      &lt;th&gt;SAG2&lt;/th&gt;
      &lt;th&gt;Spirits0&lt;/th&gt;
      &lt;th&gt;Spirits1&lt;/th&gt;
      &lt;th&gt;Spirits2&lt;/th&gt;
      &lt;th&gt;CC0&lt;/th&gt;
      &lt;th&gt;CC1&lt;/th&gt;
      &lt;th&gt;CC2&lt;/th&gt;
      &lt;th&gt;Oscar0&lt;/th&gt;
      &lt;th&gt;Oscar1&lt;/th&gt;
      &lt;th&gt;Oscar2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Hugh Grant&lt;/td&gt;
      &lt;td&gt;1995&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Terence Stamp&lt;/td&gt;
      &lt;td&gt;1995&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Tom Hanks&lt;/td&gt;
      &lt;td&gt;1995&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;John Travolta&lt;/td&gt;
      &lt;td&gt;1995&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Nigel Hawthorne&lt;/td&gt;
      &lt;td&gt;1996&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
# Globes = pd.read_json(json.loads(open(&#39;Globes.json&#39;).read()),orient=&#39;split&#39;)
# BAFTA = pd.read_json(json.loads(open(&#39;BAFTA.json&#39;).read()), orient=&#39;split&#39;)
# SAG = pd.read_json(json.loads(open(&#39;SAG.json&#39;).read()),orient=&#39;split&#39;)
# Spirits = pd.read_json(json.loads(open(&#39;Spirits.json&#39;).read()), orient=&#39;split&#39;)
# CC = pd.read_json(json.loads(open(&#39;CC.json&#39;).read()),orient=&#39;split&#39;)
# Oscar = pd.read_json(json.loads(open(&#39;Oscar.json&#39;).read()),orient=&#39;split&#39;)
# award_list = BAFTA
# for x in [Globes, SAG, Spirits, CC, Oscar]:
#     award_list = pd.merge(award_list,x, how=&#39;outer&#39;, on=[&#39;name&#39;,&#39;year&#39;])
# award_list
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
Globes=dic[&#39;Globes&#39;]
Globes[Globes[&#39;name&#39;]==&#39;Leonardo DiCaprio&#39;]
&lt;/code&gt;&lt;/p&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;Globes0&lt;/th&gt;
      &lt;th&gt;Globes1&lt;/th&gt;
      &lt;th&gt;Globes2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;18&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;1998&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;41&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;2003&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;50&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;61&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;2007&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;62&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;2007&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;74&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;2009&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;86&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;2012&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;```python
award_list[‘BAFTA0’]=award_list[‘BAFTA0’].fillna(1)
award_list[‘Globes0’]=award_list[‘Globes0’].fillna(1)
award_list[‘SAG0’]=award_list[‘SAG0’].fillna(1)
award_list[‘Spirits0’]=award_list[‘Spirits0’].fillna(1)
award_list[‘CC0’]=award_list[‘CC0’].fillna(1)
award_list=award_list.fillna(0)&lt;/p&gt;

&lt;h1 id=&quot;awardlistbafta1awardlistbafta1fillna0&quot;&gt;award_list[‘BAFTA1’]=award_list[‘BAFTA1’].fillna(0)&lt;/h1&gt;
&lt;p&gt;# award_list[‘Globes1’]=award_list[‘Globes1’].fillna(0)
# award_list[‘SAG1’]=award_list[‘SAG1’].fillna(0)
# award_list[‘Spirits1’]=award_list[‘Spirits1’].fillna(0)
# award_list[‘CC1’]=award_list[‘CC1’].fillna(0)&lt;/p&gt;

&lt;h1 id=&quot;awardlistbafta2awardlistbafta2fillna0&quot;&gt;award_list[‘BAFTA2’]=award_list[‘BAFTA2’].fillna(0)&lt;/h1&gt;
&lt;p&gt;# award_list[‘Globes2’]=award_list[‘Globes2’].fillna(0)
# award_list[‘SAG2’]=award_list[‘SAG2’].fillna(0)
# award_list[‘Spirits2’]=award_list[‘Spirits2’].fillna(0)
# award_list[‘CC2’]=award_list[‘CC2’].fillna(0)
# award_list[‘Oscar2’]=award_list[‘Oscar2’].fillna(0)&lt;/p&gt;

&lt;p&gt;award_list = award_list.drop([‘Oscar0’,’Oscar1’],axis=1)&lt;/p&gt;

&lt;p&gt;award_list=award_list.drop_duplicates()
award_list.head()
```&lt;/p&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;BAFTA0&lt;/th&gt;
      &lt;th&gt;BAFTA1&lt;/th&gt;
      &lt;th&gt;BAFTA2&lt;/th&gt;
      &lt;th&gt;Globes0&lt;/th&gt;
      &lt;th&gt;Globes1&lt;/th&gt;
      &lt;th&gt;Globes2&lt;/th&gt;
      &lt;th&gt;SAG0&lt;/th&gt;
      &lt;th&gt;SAG1&lt;/th&gt;
      &lt;th&gt;SAG2&lt;/th&gt;
      &lt;th&gt;Spirits0&lt;/th&gt;
      &lt;th&gt;Spirits1&lt;/th&gt;
      &lt;th&gt;Spirits2&lt;/th&gt;
      &lt;th&gt;CC0&lt;/th&gt;
      &lt;th&gt;CC1&lt;/th&gt;
      &lt;th&gt;CC2&lt;/th&gt;
      &lt;th&gt;Oscar2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Hugh Grant&lt;/td&gt;
      &lt;td&gt;1995&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Terence Stamp&lt;/td&gt;
      &lt;td&gt;1995&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Tom Hanks&lt;/td&gt;
      &lt;td&gt;1995&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;John Travolta&lt;/td&gt;
      &lt;td&gt;1995&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Nigel Hawthorne&lt;/td&gt;
      &lt;td&gt;1996&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
award_list[award_list[&#39;name&#39;]==&#39;Leonardo DiCaprio&#39;]
&lt;/code&gt;&lt;/p&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;BAFTA0&lt;/th&gt;
      &lt;th&gt;BAFTA1&lt;/th&gt;
      &lt;th&gt;BAFTA2&lt;/th&gt;
      &lt;th&gt;Globes0&lt;/th&gt;
      &lt;th&gt;Globes1&lt;/th&gt;
      &lt;th&gt;Globes2&lt;/th&gt;
      &lt;th&gt;SAG0&lt;/th&gt;
      &lt;th&gt;SAG1&lt;/th&gt;
      &lt;th&gt;SAG2&lt;/th&gt;
      &lt;th&gt;Spirits0&lt;/th&gt;
      &lt;th&gt;Spirits1&lt;/th&gt;
      &lt;th&gt;Spirits2&lt;/th&gt;
      &lt;th&gt;CC0&lt;/th&gt;
      &lt;th&gt;CC1&lt;/th&gt;
      &lt;th&gt;CC2&lt;/th&gt;
      &lt;th&gt;Oscar2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;47&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;58&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;2007&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;97&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;2014&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;117&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;1998&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;130&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;2003&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;141&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;2009&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;146&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;2012&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;```python
# Machine Learning Imports
from sklearn.linear_model import LogisticRegression
from sklearn.cross_validation import train_test_split
from sklearn.learning_curve import learning_curve&lt;/p&gt;

&lt;h1 id=&quot;for-evaluating-our-ml-results&quot;&gt;For evaluating our ML results&lt;/h1&gt;
&lt;p&gt;from sklearn import metrics&lt;/p&gt;

&lt;p&gt;import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style(‘whitegrid’)&lt;/p&gt;

&lt;h1 id=&quot;dataset-import&quot;&gt;Dataset Import&lt;/h1&gt;
&lt;p&gt;import statsmodels.api as sm
%matplotlib inline
```&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
X = award_list.drop([&#39;name&#39;,&#39;year&#39;,&#39;Oscar2&#39;],axis=1)
y = award_list.Oscar2
y.head()
&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0    0
1    0
2    1
3    0
4    0
Name: Oscar2, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;```python
# Create LogisticRegression model
log_model = LogisticRegression(C=1.0, penalty=’l2’, tol=1e-6)&lt;/p&gt;

&lt;h1 id=&quot;fit-our-data&quot;&gt;Fit our data&lt;/h1&gt;
&lt;p&gt;log_model.fit(X,y)&lt;/p&gt;

&lt;h1 id=&quot;check-our-accuracy&quot;&gt;Check our accuracy&lt;/h1&gt;
&lt;p&gt;log_model.score(X,y)
```&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0.96590909090909094
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;```python
def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,
                        train_sizes=np.linspace(.1, 1.0, 5)):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;plt.figure()
train_sizes, train_scores, test_scores = learning_curve(
    estimator, X, y, cv=5, n_jobs=1, train_sizes=train_sizes)
train_scores_mean = np.mean(train_scores, axis=1)
train_scores_std = np.std(train_scores, axis=1)
test_scores_mean = np.mean(test_scores, axis=1)
test_scores_std = np.std(test_scores, axis=1)

plt.fill_between(train_sizes, train_scores_mean - train_scores_std,
                 train_scores_mean + train_scores_std, alpha=0.1,
                 color=&quot;r&quot;)
plt.fill_between(train_sizes, test_scores_mean - test_scores_std,
                 test_scores_mean + test_scores_std, alpha=0.1, color=&quot;g&quot;)
plt.plot(train_sizes, train_scores_mean, &#39;o-&#39;, color=&quot;r&quot;,alpha=0.6,linewidth=4,
         label=&quot;Training score&quot;)
plt.plot(train_sizes, test_scores_mean, &#39;o-&#39;, color=&quot;navy&quot;,alpha=0.6,linewidth=4,
         label=&quot;Cross-validation score&quot;)

plt.xlabel(&quot;Training examples&quot;)
plt.ylabel(&quot;Score&quot;)
plt.legend(loc=&quot;best&quot;)
plt.grid(&quot;on&quot;) 
if ylim:
    plt.ylim(ylim)
plt.title(title)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;plot_learning_curve(LogisticRegression(C=20.0, penalty=’l2’), “LogisticRegression(C=10.0,penalty=’l2’)”,
                    X, y, ylim=(0.8, 1.05),
                    train_sizes=np.linspace(.1, 1, 10))
```&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/oscar1/output_10_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;```python
from sklearn.grid_search import GridSearchCV
GS = GridSearchCV(LogisticRegression(), 
                   param_grid={“C”: [0.1, 1.0, 5.0, 10.0, 20.0],”penalty”:[‘l1’,’l2’]})&lt;/p&gt;

&lt;p&gt;print “Chosen parameter on 100 datapoints: %s” % GS.fit(X, y).best_params_
plot_learning_curve(GS, “C”, 
                    X, y, ylim=(0.8, 1.05),
                    train_sizes=np.linspace(.1, 1, 10))
GS.best_estimator_
```&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Chosen parameter on 100 datapoints: {&#39;penalty&#39;: &#39;l1&#39;, &#39;C&#39;: 1.0}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/oscar1/output_11_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
          intercept_scaling=1, max_iter=100, multi_class=&#39;ovr&#39;, n_jobs=1,
          penalty=&#39;l1&#39;, random_state=None, solver=&#39;liblinear&#39;, tol=0.0001,
          verbose=0, warm_start=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;```python
# Globes
colist=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’]
X_test = DataFrame(columns=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
win = Series([0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)
win = Series([0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)
win = Series([0,0,0,0,1,0,0,0,0,0,0,0,0,0,0],index=colist)
X_test = X_test.append(win,ignore_index=True)&lt;/p&gt;

&lt;p&gt;log_model = LogisticRegression(C=1.0, penalty=’l1’)
log_model.fit(X,y)
log_model.predict_proba(X_test)[:,1]
```&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;array([ 0.32155716,  0.28428716,  0.28428716])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;```python
# Globes - CC
X_test = DataFrame(columns=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
win = Series([0,0,0,0,0,1,0,0,0,0,0,0,0,0,1],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)
win = Series([0,0,0,0,1,0,0,0,0,0,0,0,0,1,0],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)
win = Series([0,0,0,0,1,0,0,0,0,0,0,0,0,1,0],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)&lt;/p&gt;

&lt;p&gt;log_model = LogisticRegression(C=1.0, penalty=’l1’)
log_model.fit(X,y)
log_model.predict_proba(X_test)[:,1]
```&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;array([ 0.48074555,  0.19276261,  0.19276261])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;```python
# Globes - CC - SAGs
X_test = DataFrame(columns=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
win = Series([0,0,0,0,0,1,0,0,1,0,0,0,0,0,1],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)
win = Series([0,0,0,0,1,0,0,1,0,0,0,0,0,1,0],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)
win = Series([0,0,0,0,1,0,1,0,0,0,0,0,0,1,0],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)&lt;/p&gt;

&lt;p&gt;log_model = LogisticRegression(C=1.0, penalty=’l1’)
log_model.fit(X,y)
log_model.predict_proba(X_test)[:,1]
```&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;array([ 0.88804238,  0.05891302,  0.00865326])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;```python
# Globes - CC - SAGs - BAFTA
X_test = DataFrame(columns=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
win = Series([0,0,1,0,0,1,0,0,1,0,0,0,0,0,1],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)
win = Series([0,1,0,0,1,0,0,1,0,0,0,0,0,1,0],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)
win = Series([0,1,0,0,1,0,1,0,0,0,0,0,0,1,0],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)&lt;/p&gt;

&lt;p&gt;log_model = LogisticRegression(C=1.0, penalty=’l1’)
log_model.fit(X,y)
log_model.predict_proba(X_test)[:,1]
```&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;array([ 0.88809967,  0.05896   ,  0.00865978])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;```python
# Globes - CC - SAGs - BAFTA - Spirits
X_test = DataFrame(columns=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
win = Series([0,0,1,0,0,1,0,0,1,1,0,0,0,0,1],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)
win = Series([0,1,0,0,1,0,0,1,0,1,0,0,0,1,0],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)
win = Series([0,1,0,0,1,0,1,0,0,1,0,0,0,1,0],index=[‘B0’,’B1’,’B2’,’G0’,’G1’,’G2’,’S0’,’S1’,’S2’,’SP0’,’SP1’,’SP2’,’C0’,’C1’,’C2’])
X_test = X_test.append(win,ignore_index=True)&lt;/p&gt;

&lt;p&gt;log_model = LogisticRegression(C=1.0, penalty=’l1’)
log_model.fit(X,y)
log_model.predict_proba(X_test)[:,1]
```&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;array([ 0.87316036,  0.0515114 ,  0.0075178 ])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
matrix = DataFrame(columns=[&#39;name&#39;,&#39;Globes&#39;,&#39;CriticsChoice&#39;,&#39;SAGs&#39;,&#39;BAFTA&#39;,&#39;Spirit&#39;])
nominee = Series([&#39;Leonardo DiCaprio&#39;,0.0157,0.279,0.83,0.911,0.911],index=[&#39;name&#39;,&#39;Globes&#39;,&#39;CriticsChoice&#39;,&#39;SAGs&#39;,&#39;BAFTA&#39;,&#39;Spirit&#39;])
matrix = matrix.append(nominee,ignore_index=True)
nominee1 = Series([&#39;Michael Fassbender&#39;,0.008,0.003,0.024,0.0486,0.0486],index=[&#39;name&#39;,&#39;Globes&#39;,&#39;CriticsChoice&#39;,&#39;SAGs&#39;,&#39;BAFTA&#39;,&#39;Spirit&#39;])
matrix = matrix.append(nominee1,ignore_index=True)
nominee2 = Series([&#39;Matt Damon&#39;,0.0086,0.0087,0.0033,0.0033,0.0068],index=[&#39;name&#39;,&#39;Globes&#39;,&#39;CriticsChoice&#39;,&#39;SAGs&#39;,&#39;BAFTA&#39;,&#39;Spirit&#39;])
matrix = matrix.append(nominee2,ignore_index=True)
matrix
&lt;/code&gt;&lt;/p&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;Globes&lt;/th&gt;
      &lt;th&gt;CriticsChoice&lt;/th&gt;
      &lt;th&gt;SAGs&lt;/th&gt;
      &lt;th&gt;BAFTA&lt;/th&gt;
      &lt;th&gt;Spirit&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Leonardo DiCaprio&lt;/td&gt;
      &lt;td&gt;0.0157&lt;/td&gt;
      &lt;td&gt;0.2790&lt;/td&gt;
      &lt;td&gt;0.8300&lt;/td&gt;
      &lt;td&gt;0.9110&lt;/td&gt;
      &lt;td&gt;0.9110&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Michael Fassbender&lt;/td&gt;
      &lt;td&gt;0.0080&lt;/td&gt;
      &lt;td&gt;0.0030&lt;/td&gt;
      &lt;td&gt;0.0240&lt;/td&gt;
      &lt;td&gt;0.0486&lt;/td&gt;
      &lt;td&gt;0.0486&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Matt Damon&lt;/td&gt;
      &lt;td&gt;0.0086&lt;/td&gt;
      &lt;td&gt;0.0087&lt;/td&gt;
      &lt;td&gt;0.0033&lt;/td&gt;
      &lt;td&gt;0.0033&lt;/td&gt;
      &lt;td&gt;0.0068&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
plt.figure()
plt.plot(nominee[1:], &#39;s-&#39;, color=&quot;r&quot;,alpha=0.4,linewidth=4,
             label=&quot;Leonardo DiCaprio (The Revenant)&quot;)
plt.plot(nominee1[1:], &#39;s-&#39;, color=&quot;b&quot;,alpha=0.5,linewidth=4,
             label=&quot;Michael Fassbender (Steve Jobs)&quot;)
plt.plot(nominee2[1:], &#39;s-&#39;, color=&quot;g&quot;,alpha=0.5,linewidth=4,
             label=&quot;Matt Damon (The Martian)&quot;)
labels=[&#39;Globes&#39;,&#39;CriticsChoice&#39;,&#39;SAGs&#39;,&#39;BAFTA&#39;,&#39;Spirit&#39;]
plt.xticks([0,1,2,3,4], labels)
plt.xlabel(&quot;Awards List&quot;)
plt.ylabel(&quot;Probability to win Oscar&quot;)
plt.xlim(-0.5,4.5)
plt.ylim(-0.1,1.1)
plt.legend(loc=&quot;best&quot;)
plt.grid(&quot;on&quot;)
plt.show()
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/oscar1/output_18_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Mar 2016 00:00:00 +0100</pubDate>
        <link>zonemercy.github.io/2016/03/15/Oscar-Prediction/</link>
        <guid isPermaLink="true">zonemercy.github.io/2016/03/15/Oscar-Prediction/</guid>
        
        <category>python</category>
        
        <category>data science</category>
        
        <category>oscar</category>
        
        <category>machine learning</category>
        
        <category>scikit-learn</category>
        
        <category>web scraping</category>
        
        
      </item>
    
      <item>
        <title>Stock Trading Ipython Notebook</title>
        <description>&lt;h2 id=&quot;appt-1656-i-classfa-fa-twitter-fa-lgi&quot;&gt;APPT 1656 &lt;i class=&quot;fa fa-twitter fa-lg&quot;&gt;&lt;/i&gt;&lt;/h2&gt;

&lt;h2 id=&quot;page-build-warning-email&quot;&gt;“Page Build Warning” email&lt;/h2&gt;

&lt;p&gt;These days, some of you must receive a “Page Build Warning” email from github after you commit happily. &lt;strong&gt;Don’t Worried!&lt;/strong&gt; It just that github changes its build environment.
 &lt;a href=&quot;http://huxpro.github.io&quot;&gt;View Live Hux Blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this mail, github told us:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You are attempting to use the ‘pygments’ highlighter, which is currently unsupported on GitHub Pages. Your site will use ‘rouge’ for highlighting instead. To suppress this warning, change the ‘highlighter’ value to ‘rouge’ in your ‘_config.yml’.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, just edit &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;, find &lt;code class=&quot;highlighter-rouge&quot;&gt;highlighter: pygments&lt;/code&gt;, change it to &lt;code class=&quot;highlighter-rouge&quot;&gt;highlighter: rouge&lt;/code&gt; and the warning will be gone.&lt;/p&gt;

&lt;h2 id=&quot;boilerplate-beta&quot;&gt;Boilerplate (beta)&lt;/h2&gt;

&lt;p&gt;Want to clone a boilerplate instead of my buzz blog? Here comes this!&lt;/p&gt;

&lt;h3 id=&quot;post-test&quot;&gt;Post Test&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
from datetime import datetime
from __future__ import division
import pandas as pd    
from pandas import Series,DataFrame
from pandas.io.data import DataReader
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style(&#39;whitegrid&#39;)
%matplotlib inline
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
end = datetime.now()
start = datetime(end.year - 1,end.month,end.day)
s = DataReader(&quot;BABA&quot;,&#39;yahoo&#39;,start,end)
#s.ix[&#39;2015-12-24&#39;]
s.head()
&lt;/code&gt;&lt;/p&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Open&lt;/th&gt;
      &lt;th&gt;High&lt;/th&gt;
      &lt;th&gt;Low&lt;/th&gt;
      &lt;th&gt;Close&lt;/th&gt;
      &lt;th&gt;Volume&lt;/th&gt;
      &lt;th&gt;Adj Close&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-01-05&lt;/th&gt;
      &lt;td&gt;102.760002&lt;/td&gt;
      &lt;td&gt;103.019997&lt;/td&gt;
      &lt;td&gt;99.900002&lt;/td&gt;
      &lt;td&gt;101.000000&lt;/td&gt;
      &lt;td&gt;18337000&lt;/td&gt;
      &lt;td&gt;101.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-01-06&lt;/th&gt;
      &lt;td&gt;101.250000&lt;/td&gt;
      &lt;td&gt;103.849998&lt;/td&gt;
      &lt;td&gt;100.110001&lt;/td&gt;
      &lt;td&gt;103.320000&lt;/td&gt;
      &lt;td&gt;15720400&lt;/td&gt;
      &lt;td&gt;103.320000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-01-07&lt;/th&gt;
      &lt;td&gt;104.589996&lt;/td&gt;
      &lt;td&gt;104.739998&lt;/td&gt;
      &lt;td&gt;102.029999&lt;/td&gt;
      &lt;td&gt;102.129997&lt;/td&gt;
      &lt;td&gt;11052200&lt;/td&gt;
      &lt;td&gt;102.129997&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-01-08&lt;/th&gt;
      &lt;td&gt;102.949997&lt;/td&gt;
      &lt;td&gt;105.339996&lt;/td&gt;
      &lt;td&gt;102.680000&lt;/td&gt;
      &lt;td&gt;105.029999&lt;/td&gt;
      &lt;td&gt;12942100&lt;/td&gt;
      &lt;td&gt;105.029999&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-01-09&lt;/th&gt;
      &lt;td&gt;105.239998&lt;/td&gt;
      &lt;td&gt;105.300003&lt;/td&gt;
      &lt;td&gt;102.889999&lt;/td&gt;
      &lt;td&gt;103.019997&lt;/td&gt;
      &lt;td&gt;10222200&lt;/td&gt;
      &lt;td&gt;103.019997&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
s[&#39;Adj Close&#39;].plot(legend=True,figsize=(10,4))
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stock1/output_2_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
s[&#39;Volume&#39;].plot(legend=True,figsize=(10,4))
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stock1/output_3_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
ma_day = [10,20,40]
for ma in ma_day:
    column = &quot;MA for %s days&quot; %(str(ma))
    s[column] = pd.rolling_mean(s[&#39;Adj Close&#39;],ma)
s[[&#39;Adj Close&#39;,&#39;MA for 10 days&#39;,&#39;MA for 20 days&#39;,&#39;MA for 40 days&#39;]].plot(subplots=False,figsize=(10,4))
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stock1/output_4_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
s[&#39;Daily Return&#39;]=s[&#39;Adj Close&#39;].pct_change()
# print s[&#39;Daily Return&#39;]
s[&#39;Daily Return&#39;].dropna().plot(figsize=(10,4),legend=True,linestyle=&#39;--&#39;,marker=&#39;s&#39;)
print s[&#39;Daily Return&#39;].mean()
print s[&#39;Daily Return&#39;].std()
&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-0.000642374946063
0.0213393676909
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stock1/output_5_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
sns.plt.xlim(-0.1,0.1)
sns.distplot(s[&#39;Daily Return&#39;].dropna(),color=&#39;0.2&#39;,bins=40,
             kde_kws={&quot;color&quot;: sns.xkcd_rgb[&quot;pale red&quot;], &quot;lw&quot;: 3, 
             &quot;bw&quot;: 0.2,&quot;alpha&quot;: .8})
# sns.kdeplot(s[&#39;Daily Return&#39;].dropna())
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stock1/output_6_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
close_df = DataReader([&#39;BABA&#39;,&#39;EBAY&#39;,&#39;AMZN&#39;,&#39;PYPL&#39;],&#39;yahoo&#39;,start,end)[&#39;Adj Close&#39;]
close_df[&#39;AMZN&#39;].plot()
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stock1/output_7_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
pct_df = close_df.pct_change()
sns.jointplot(&#39;EBAY&#39;,&#39;PYPL&#39;,pct_df,kind=&#39;scatter&#39;,joint_kws={&#39;alpha&#39;:0.6})
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stock1/output_8_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
sns.pairplot(pct_df.dropna())
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stock1/output_9_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
close_df1 = DataReader([&#39;BABA&#39;,&#39;EBAY&#39;,&#39;AMZN&#39;,&#39;YHOO&#39;,&#39;WMT&#39;],&#39;yahoo&#39;,start,end)[&#39;Adj Close&#39;]
pct_df1 = close_df1.pct_change()
with sns.axes_style(&#39;darkgrid&#39;):
    fig, ax = plt.subplots(figsize=(6, 6))
    sns.corrplot(pct_df1.dropna(),annot=True,
                 cmap=sns.diverging_palette(230, 20,sep=50, 
                 n=7,as_cmap=True))   
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stock1/output_10_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;```python
risk_df = pct_df1&lt;/p&gt;

&lt;p&gt;plt.ylim([0.01,0.028])
plt.xlim([-0.005,0.01])
plt.xlabel(‘Expected returns’)
plt.ylabel(‘Risk’)&lt;/p&gt;

&lt;p&gt;plt.scatter(risk_df.mean(),risk_df.std(),alpha=0.5,
            s=close_df1.dropna().mean(),label=’Average Adj Close’)
plt.legend(loc=1)&lt;/p&gt;

&lt;p&gt;for label, x, y in zip(risk_df.columns, risk_df.mean(), risk_df.std()):
    plt.annotate(
        label, 
        xy = (x, y), xytext = (30, 10),
        textcoords = ‘offset points’, ha = ‘left’, va = ‘bottom’,
        bbox = dict(boxstyle = ‘round,pad=0.3’, fc = ‘yellow’, alpha = .5),
        arrowprops = dict(arrowstyle = ‘-‘, connectionstyle = ‘arc3,
        rad=-0.1’))
```&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stock1/output_11_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
risk_df[&#39;BABA&#39;].quantile(0.05)
&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-0.032540597138561403
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;```python
days = 365
dt = 1/days
mu = risk_df.mean()[‘BABA’] # drift of expected return
sigma = risk_df.std()[‘BABA’] # volatility of stock&lt;/p&gt;

&lt;p&gt;def stock_monte_carlo(start_price,days,mu,sigma):
    price = np.zeros(days)
    price[0] = start_price
    shock = np.zeros(days)
    drift = np.zeros(days)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for x in xrange(1,days):
    shock[x] = np.random.normal(loc=mu * dt, scale=sigma * np.sqrt(dt))
    drift[x] = mu * dt
    price[x] = price[x-1] + (price[x-1] * (drift[x] + shock[x]))
return price
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;start_price = 103.94&lt;/p&gt;

&lt;p&gt;for run in xrange(100):
    plt.plot(stock_monte_carlo(start_price,days,mu,sigma))&lt;/p&gt;

&lt;h1 id=&quot;pltplotsadj-close&quot;&gt;plt.plot(s[‘Adj Close’])&lt;/h1&gt;
&lt;p&gt;plt.xlabel(“Days”)
plt.ylabel(“Price”)
plt.title(‘Alibaba based on Monte Carlo Simulation’)
```&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stock1/output_13_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;```python
# Set a large numebr of runs
runs = 10000&lt;/p&gt;

&lt;h1 id=&quot;create-an-empty-matrix-to-hold-the-end-price-data&quot;&gt;Create an empty matrix to hold the end price data&lt;/h1&gt;
&lt;p&gt;simulations = np.zeros(runs)&lt;/p&gt;

&lt;h1 id=&quot;set-the-print-options-of-numpy-to-only-display-0-5-points-from-an-array-to-suppress-output&quot;&gt;Set the print options of numpy to only display 0-5 points from an array to suppress output&lt;/h1&gt;
&lt;p&gt;np.set_printoptions(threshold=5)&lt;/p&gt;

&lt;p&gt;for run in xrange(runs):  &lt;br /&gt;
    # Set the simulation data point as the last stock price for that run
    simulations[run] = stock_monte_carlo(start_price,days,mu,sigma)[days-1];
```&lt;/p&gt;

&lt;p&gt;```python
# Now we’lll define q as the 1% empirical qunatile, this basically means that 99% of the values should fall between here
q = np.percentile(simulations, 1)&lt;/p&gt;

&lt;h1 id=&quot;now-lets-plot-the-distribution-of-the-end-prices&quot;&gt;Now let’s plot the distribution of the end prices&lt;/h1&gt;
&lt;p&gt;plt.hist(simulations,bins=200)&lt;/p&gt;

&lt;h1 id=&quot;using-pltfigtext-to-fill-in-some-additional-information-onto-the-plot&quot;&gt;Using plt.figtext to fill in some additional information onto the plot&lt;/h1&gt;

&lt;h1 id=&quot;starting-price&quot;&gt;Starting Price&lt;/h1&gt;
&lt;p&gt;plt.figtext(0.65, 0.8, “Start price: $%.2f” %start_price)
# Mean ending price
plt.figtext(0.65, 0.7, “Mean final: $%.2f” % simulations.mean())&lt;/p&gt;

&lt;h1 id=&quot;variance-of-the-price-within-99-confidence-interval&quot;&gt;Variance of the price (within 99% confidence interval)&lt;/h1&gt;
&lt;p&gt;plt.figtext(0.65, 0.6, “VaR(0.99): $%.2f” % (start_price - q,), color=’.4’)&lt;/p&gt;

&lt;h1 id=&quot;display-1-quantile&quot;&gt;Display 1% quantile&lt;/h1&gt;
&lt;p&gt;plt.figtext(0.65, 0.5, “q(0.99): $%.2f” % q, color=sns.xkcd_rgb[“pale red”])&lt;/p&gt;

&lt;h1 id=&quot;plot-a-line-at-the-1-quantile-result&quot;&gt;Plot a line at the 1% quantile result&lt;/h1&gt;
&lt;p&gt;plt.axvline(x=q, linewidth=3,color=sns.xkcd_rgb[“pale red”],alpha=.8)
plt.axvline(x=start_price, linewidth=3,color=’.6’,alpha=.6)&lt;/p&gt;

&lt;h1 id=&quot;title&quot;&gt;Title&lt;/h1&gt;
&lt;p&gt;plt.title(u”Final price distribution for Alibaba Stock after %s days” % days, weight=’bold’);
```&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/stock1/output_15_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 13 Mar 2016 00:00:00 +0100</pubDate>
        <link>zonemercy.github.io/2016/03/13/Stock-Analysis/</link>
        <guid isPermaLink="true">zonemercy.github.io/2016/03/13/Stock-Analysis/</guid>
        
        <category>python</category>
        
        <category>stock analysis</category>
        
        <category>data science</category>
        
        <category>scikit-learn</category>
        
        
      </item>
    
  </channel>
</rss>
