<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zOnemercy and you</title>
    <description>This is a description of zOnemercy</description>
    <link>zonemercy.github.io/</link>
    <atom:link href="zonemercy.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 29 Mar 2016 22:40:17 +0200</pubDate>
    <lastBuildDate>Tue, 29 Mar 2016 22:40:17 +0200</lastBuildDate>
    <generator>Jekyll v3.1.0</generator>
    
      <item>
        <title>OSCAR PREDICTION</title>
        <description>&lt;p&gt;小李子的故事 小李子的故事 小李子的故事 小李子的故事&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Mar 2016 00:00:00 +0100</pubDate>
        <link>zonemercy.github.io/2016/03/15/Oscar/</link>
        <guid isPermaLink="true">zonemercy.github.io/2016/03/15/Oscar/</guid>
        
        <category>datascience</category>
        
        
      </item>
    
      <item>
        <title>STOCK IPYTHON</title>
        <description>&lt;h3 id=&quot;post-test&quot;&gt;Post Test&lt;/h3&gt;

&lt;p&gt;上周末巴萨在主场表现出了强大的控制力，凭借华丽的进攻6-0大胜赫塔菲。其实在那场比赛中，恩里克便已经考虑到了周中与阿森纳的较量，并做了充足的备战，他让球队丢掉了“挨打-反击”战术，从一开场便抢夺比赛的控制权，通过潮水般的攻势和成功的高位防守吃掉了对手。此役面对阿森纳，巴萨一开场便表明了以我为主、主动出击的态度，如果阿森纳一味防守，那一场一边倒的大屠杀将在所难免。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;好在温格决定让阿森纳在诺坎普站着死，教授最近因为球队糟糕的战绩而饱受指责，就连他在枪手的帅位也变得岌岌可危。今天凌晨，温格终于血性了一把，他收起了首回合防守反击的战术，命令球队加强中前场的逼抢和快攻，鼓励球员用更多的射门去威胁对手。厄齐尔和桑切斯很好地执行了温格的战术，只可惜球队的锋线球员实在不争气，远不如巴萨稳固的后防又频频受到MSN的打击，最终输掉了比赛&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
from datetime import datetime
from __future__ import division
import pandas as pd    
from pandas import Series,DataFrame
from pandas.io.data import DataReader
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style(&#39;whitegrid&#39;)
%matplotlib inline
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
end = datetime.now()
start = datetime(end.year - 1,end.month,end.day)
s = DataReader(&quot;BABA&quot;,&#39;yahoo&#39;,start,end)
#s.ix[&#39;2015-12-24&#39;]
s.head()
&lt;/code&gt;&lt;/p&gt;

&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt;
  &lt;thead&gt;
    &lt;tr style=&quot;text-align: right;&quot;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Open&lt;/th&gt;
      &lt;th&gt;High&lt;/th&gt;
      &lt;th&gt;Low&lt;/th&gt;
      &lt;th&gt;Close&lt;/th&gt;
      &lt;th&gt;Volume&lt;/th&gt;
      &lt;th&gt;Adj Close&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-01-05&lt;/th&gt;
      &lt;td&gt;102.760002&lt;/td&gt;
      &lt;td&gt;103.019997&lt;/td&gt;
      &lt;td&gt;99.900002&lt;/td&gt;
      &lt;td&gt;101.000000&lt;/td&gt;
      &lt;td&gt;18337000&lt;/td&gt;
      &lt;td&gt;101.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-01-06&lt;/th&gt;
      &lt;td&gt;101.250000&lt;/td&gt;
      &lt;td&gt;103.849998&lt;/td&gt;
      &lt;td&gt;100.110001&lt;/td&gt;
      &lt;td&gt;103.320000&lt;/td&gt;
      &lt;td&gt;15720400&lt;/td&gt;
      &lt;td&gt;103.320000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-01-07&lt;/th&gt;
      &lt;td&gt;104.589996&lt;/td&gt;
      &lt;td&gt;104.739998&lt;/td&gt;
      &lt;td&gt;102.029999&lt;/td&gt;
      &lt;td&gt;102.129997&lt;/td&gt;
      &lt;td&gt;11052200&lt;/td&gt;
      &lt;td&gt;102.129997&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-01-08&lt;/th&gt;
      &lt;td&gt;102.949997&lt;/td&gt;
      &lt;td&gt;105.339996&lt;/td&gt;
      &lt;td&gt;102.680000&lt;/td&gt;
      &lt;td&gt;105.029999&lt;/td&gt;
      &lt;td&gt;12942100&lt;/td&gt;
      &lt;td&gt;105.029999&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2015-01-09&lt;/th&gt;
      &lt;td&gt;105.239998&lt;/td&gt;
      &lt;td&gt;105.300003&lt;/td&gt;
      &lt;td&gt;102.889999&lt;/td&gt;
      &lt;td&gt;103.019997&lt;/td&gt;
      &lt;td&gt;10222200&lt;/td&gt;
      &lt;td&gt;103.019997&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
s[&#39;Adj Close&#39;].plot(legend=True,figsize=(10,4))
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/output_2_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
s[&#39;Volume&#39;].plot(legend=True,figsize=(10,4))
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/output_3_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
ma_day = [10,20,40]
for ma in ma_day:
    column = &quot;MA for %s days&quot; %(str(ma))
    s[column] = pd.rolling_mean(s[&#39;Adj Close&#39;],ma)
s[[&#39;Adj Close&#39;,&#39;MA for 10 days&#39;,&#39;MA for 20 days&#39;,&#39;MA for 40 days&#39;]].plot(subplots=False,figsize=(10,4))
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/output_4_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
s[&#39;Daily Return&#39;]=s[&#39;Adj Close&#39;].pct_change()
# print s[&#39;Daily Return&#39;]
s[&#39;Daily Return&#39;].dropna().plot(figsize=(10,4),legend=True,linestyle=&#39;--&#39;,marker=&#39;s&#39;)
print s[&#39;Daily Return&#39;].mean()
print s[&#39;Daily Return&#39;].std()
&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-0.000642374946063
0.0213393676909
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/output_5_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
sns.plt.xlim(-0.1,0.1)
sns.distplot(s[&#39;Daily Return&#39;].dropna(),color=&#39;0.2&#39;,bins=40,
             kde_kws={&quot;color&quot;: sns.xkcd_rgb[&quot;pale red&quot;], &quot;lw&quot;: 3, 
             &quot;bw&quot;: 0.2,&quot;alpha&quot;: .8})
# sns.kdeplot(s[&#39;Daily Return&#39;].dropna())
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/output_6_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
close_df = DataReader([&#39;BABA&#39;,&#39;EBAY&#39;,&#39;AMZN&#39;,&#39;PYPL&#39;],&#39;yahoo&#39;,start,end)[&#39;Adj Close&#39;]
close_df[&#39;AMZN&#39;].plot()
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/output_7_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
pct_df = close_df.pct_change()
sns.jointplot(&#39;EBAY&#39;,&#39;PYPL&#39;,pct_df,kind=&#39;scatter&#39;,joint_kws={&#39;alpha&#39;:0.6})
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/output_8_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
sns.pairplot(pct_df.dropna())
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/output_9_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
close_df1 = DataReader([&#39;BABA&#39;,&#39;EBAY&#39;,&#39;AMZN&#39;,&#39;YHOO&#39;,&#39;WMT&#39;],&#39;yahoo&#39;,start,end)[&#39;Adj Close&#39;]
pct_df1 = close_df1.pct_change()
with sns.axes_style(&#39;darkgrid&#39;):
    fig, ax = plt.subplots(figsize=(6, 6))
    sns.corrplot(pct_df1.dropna(),annot=True,
                 cmap=sns.diverging_palette(230, 20,sep=50, 
                 n=7,as_cmap=True))   
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/output_10_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;```python
risk_df = pct_df1&lt;/p&gt;

&lt;p&gt;plt.ylim([0.01,0.028])
plt.xlim([-0.005,0.01])
plt.xlabel(‘Expected returns’)
plt.ylabel(‘Risk’)&lt;/p&gt;

&lt;p&gt;plt.scatter(risk_df.mean(),risk_df.std(),alpha=0.5,
            s=close_df1.dropna().mean(),label=’Average Adj Close’)
plt.legend(loc=1)&lt;/p&gt;

&lt;p&gt;for label, x, y in zip(risk_df.columns, risk_df.mean(), risk_df.std()):
    plt.annotate(
        label, 
        xy = (x, y), xytext = (30, 10),
        textcoords = ‘offset points’, ha = ‘left’, va = ‘bottom’,
        bbox = dict(boxstyle = ‘round,pad=0.3’, fc = ‘yellow’, alpha = .5),
        arrowprops = dict(arrowstyle = ‘-‘, connectionstyle = ‘arc3,
        rad=-0.1’))
```&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/output_11_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python
risk_df[&#39;BABA&#39;].quantile(0.05)
&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-0.032540597138561403
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;```python
days = 365
dt = 1/days
mu = risk_df.mean()[‘BABA’] # drift of expected return
sigma = risk_df.std()[‘BABA’] # volatility of stock&lt;/p&gt;

&lt;p&gt;def stock_monte_carlo(start_price,days,mu,sigma):
    price = np.zeros(days)
    price[0] = start_price
    shock = np.zeros(days)
    drift = np.zeros(days)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for x in xrange(1,days):
    shock[x] = np.random.normal(loc=mu * dt, scale=sigma * np.sqrt(dt))
    drift[x] = mu * dt
    price[x] = price[x-1] + (price[x-1] * (drift[x] + shock[x]))
return price
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;start_price = 103.94&lt;/p&gt;

&lt;p&gt;for run in xrange(100):
    plt.plot(stock_monte_carlo(start_price,days,mu,sigma))&lt;/p&gt;

&lt;h1 id=&quot;pltplotsadj-close&quot;&gt;plt.plot(s[‘Adj Close’])&lt;/h1&gt;
&lt;p&gt;plt.xlabel(“Days”)
plt.ylabel(“Price”)
plt.title(‘Alibaba based on Monte Carlo Simulation’)
```&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/output_13_1.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;```python
# Set a large numebr of runs
runs = 10000&lt;/p&gt;

&lt;h1 id=&quot;create-an-empty-matrix-to-hold-the-end-price-data&quot;&gt;Create an empty matrix to hold the end price data&lt;/h1&gt;
&lt;p&gt;simulations = np.zeros(runs)&lt;/p&gt;

&lt;h1 id=&quot;set-the-print-options-of-numpy-to-only-display-0-5-points-from-an-array-to-suppress-output&quot;&gt;Set the print options of numpy to only display 0-5 points from an array to suppress output&lt;/h1&gt;
&lt;p&gt;np.set_printoptions(threshold=5)&lt;/p&gt;

&lt;p&gt;for run in xrange(runs):  &lt;br /&gt;
    # Set the simulation data point as the last stock price for that run
    simulations[run] = stock_monte_carlo(start_price,days,mu,sigma)[days-1];
```&lt;/p&gt;

&lt;p&gt;```python
# Now we’lll define q as the 1% empirical qunatile, this basically means that 99% of the values should fall between here
q = np.percentile(simulations, 1)&lt;/p&gt;

&lt;h1 id=&quot;now-lets-plot-the-distribution-of-the-end-prices&quot;&gt;Now let’s plot the distribution of the end prices&lt;/h1&gt;
&lt;p&gt;plt.hist(simulations,bins=200)&lt;/p&gt;

&lt;h1 id=&quot;using-pltfigtext-to-fill-in-some-additional-information-onto-the-plot&quot;&gt;Using plt.figtext to fill in some additional information onto the plot&lt;/h1&gt;

&lt;h1 id=&quot;starting-price&quot;&gt;Starting Price&lt;/h1&gt;
&lt;p&gt;plt.figtext(0.65, 0.8, “Start price: $%.2f” %start_price)
# Mean ending price
plt.figtext(0.65, 0.7, “Mean final: $%.2f” % simulations.mean())&lt;/p&gt;

&lt;h1 id=&quot;variance-of-the-price-within-99-confidence-interval&quot;&gt;Variance of the price (within 99% confidence interval)&lt;/h1&gt;
&lt;p&gt;plt.figtext(0.65, 0.6, “VaR(0.99): $%.2f” % (start_price - q,), color=’.4’)&lt;/p&gt;

&lt;h1 id=&quot;display-1-quantile&quot;&gt;Display 1% quantile&lt;/h1&gt;
&lt;p&gt;plt.figtext(0.65, 0.5, “q(0.99): $%.2f” % q, color=sns.xkcd_rgb[“pale red”])&lt;/p&gt;

&lt;h1 id=&quot;plot-a-line-at-the-1-quantile-result&quot;&gt;Plot a line at the 1% quantile result&lt;/h1&gt;
&lt;p&gt;plt.axvline(x=q, linewidth=3,color=sns.xkcd_rgb[“pale red”],alpha=.8)
plt.axvline(x=start_price, linewidth=3,color=’.6’,alpha=.6)&lt;/p&gt;

&lt;h1 id=&quot;title&quot;&gt;Title&lt;/h1&gt;
&lt;p&gt;plt.title(u”Final price distribution for Alibaba Stock after %s days” % days, weight=’bold’);
```&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/image/output_15_0.png&quot; alt=&quot;png&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 13 Mar 2016 00:00:00 +0100</pubDate>
        <link>zonemercy.github.io/2016/03/13/Stock-Analysis/</link>
        <guid isPermaLink="true">zonemercy.github.io/2016/03/13/Stock-Analysis/</guid>
        
        <category>python</category>
        
        
        <category></category>
        
      </item>
    
  </channel>
</rss>
